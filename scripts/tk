#!/usr/bin/env python3
"""
Simple time keeping script
"""
import argparse
import datetime
import subprocess

import timekeeper


def main():
    """
    Main method. Get args, keep time
    """
    parser = argparse.ArgumentParser(
        "Script to keep track of time in/out of work")
    parser.add_argument("action", default="stat",
                        choices=["in", "out", "stat", "long", "week", "edit"], nargs="?")
    parser.add_argument(
        "--time", "-t", help="Time to use for operation", required=False)
    parser.add_argument(
        "--day", "-d", help="The day to use", required=False)
    parser.add_argument(
        "--job", "-j", help="The job to work", required=False)
    parser.add_argument(
        '--hours', '-l', help="How long you want to work today", required=False)

    args, _ = parser.parse_known_args()
    if args.day is not None:
        a_date = datetime.datetime.strptime(args.day, "%Y-%m-%d")
        today = timekeeper.Day(a_date.date())
    else:
        today = timekeeper.Day()
    the_time = None
    if args.time is not None:
        the_time = datetime.datetime.strptime(args.time, "%H:%M")
    if args.action == 'in':
        today.inout("IN", task=args.job, the_time=the_time)
    if args.action == 'out':
        today.inout("OUT", task=args.job, the_time=the_time)
    if args.action == 'stat':
        today.stat()
    if args.action == 'long':
        if args.hours is not None:
            provided_time = datetime.datetime.strptime(args.hours, "%H:%M")
            midnight = datetime.datetime.strptime("00:00", "%H:%M")
            elapsed = provided_time - midnight
        else:
            elapsed = datetime.timedelta(hours=8)
        total, _ = today.collect_times()
        remaining = elapsed - total
        if remaining.total_seconds() < 0:
            print("Have already worked long enough :)")
        else:
            # When will it be over
            done = datetime.datetime.now() + remaining
            print("Done at: " + done.strftime("%H:%M"))

    if args.action == "week":
        # Find start and end of week Sat -> Friday
        weekday = today.date.weekday()
        # Wee need to find what day is saturday
        offset = -(weekday + 2)
        if offset <= -7:
            offset += 7
        sunday = today.date + datetime.timedelta(days=offset)
        total_time = datetime.timedelta(seconds=0)
        day_times = []
        for i in range(7):
            aday = sunday + datetime.timedelta(days=i)
            keeper = timekeeper.Day(date=aday)
            daily, _ = keeper.collect_times()
            day_times.append((aday, daily))
            total_time += daily
            # Print info, highlight the total time
        print(
            f"Hours for week:{timekeeper.delta_to_hour_min(total_time)}")
        for day, delta in day_times:
            print(f'\t{day:%a %Y-%m-%d}: {timekeeper.delta_to_hour_min(delta)}')

    if args.action == "edit":
        subprocess.run(['vim', today.file], check=False)


if __name__ == "__main__":
    main()
